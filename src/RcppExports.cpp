// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "RHyper_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// create_hyper_process
SEXP create_hyper_process(SEXP telemetry);
RcppExport SEXP _RHyper_create_hyper_process(SEXP telemetrySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type telemetry(telemetrySEXP);
    rcpp_result_gen = Rcpp::wrap(create_hyper_process(telemetry));
    return rcpp_result_gen;
END_RCPP
}
// create_hyper_connection
SEXP create_hyper_connection(SEXP process_ptr, Rcpp::List database);
RcppExport SEXP _RHyper_create_hyper_connection(SEXP process_ptrSEXP, SEXP databaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type process_ptr(process_ptrSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type database(databaseSEXP);
    rcpp_result_gen = Rcpp::wrap(create_hyper_connection(process_ptr, database));
    return rcpp_result_gen;
END_RCPP
}
// disconnect
void disconnect(SEXP connection_ptr);
RcppExport SEXP _RHyper_disconnect(SEXP connection_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type connection_ptr(connection_ptrSEXP);
    disconnect(connection_ptr);
    return R_NilValue;
END_RCPP
}
// terminate
void terminate(SEXP process_ptr);
RcppExport SEXP _RHyper_terminate(SEXP process_ptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type process_ptr(process_ptrSEXP);
    terminate(process_ptr);
    return R_NilValue;
END_RCPP
}
// attach_database
void attach_database(SEXP connection_ptr, SEXP db_file);
RcppExport SEXP _RHyper_attach_database(SEXP connection_ptrSEXP, SEXP db_fileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type connection_ptr(connection_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type db_file(db_fileSEXP);
    attach_database(connection_ptr, db_file);
    return R_NilValue;
END_RCPP
}
// detach_database
void detach_database(SEXP connection_ptr, SEXP db_name);
RcppExport SEXP _RHyper_detach_database(SEXP connection_ptrSEXP, SEXP db_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type connection_ptr(connection_ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type db_name(db_nameSEXP);
    detach_database(connection_ptr, db_name);
    return R_NilValue;
END_RCPP
}
// query_execute
void query_execute(SEXP conn, SEXP statement);
RcppExport SEXP _RHyper_query_execute(SEXP connSEXP, SEXP statementSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    Rcpp::traits::input_parameter< SEXP >::type statement(statementSEXP);
    query_execute(conn, statement);
    return R_NilValue;
END_RCPP
}
// fetch_all
SEXP fetch_all(SEXP res_);
RcppExport SEXP _RHyper_fetch_all(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    rcpp_result_gen = Rcpp::wrap(fetch_all(res_));
    return rcpp_result_gen;
END_RCPP
}
// fetch_n2
SEXP fetch_n2(SEXP res_, SEXP iter_, SEXP iter_end_, SEXP n_);
RcppExport SEXP _RHyper_fetch_n2(SEXP res_SEXP, SEXP iter_SEXP, SEXP iter_end_SEXP, SEXP n_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type iter_(iter_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type iter_end_(iter_end_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type n_(n_SEXP);
    rcpp_result_gen = Rcpp::wrap(fetch_n2(res_, iter_, iter_end_, n_));
    return rcpp_result_gen;
END_RCPP
}
// create_result
SEXP create_result(SEXP conn_, SEXP statement_);
RcppExport SEXP _RHyper_create_result(SEXP conn_SEXP, SEXP statement_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn_(conn_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type statement_(statement_SEXP);
    rcpp_result_gen = Rcpp::wrap(create_result(conn_, statement_));
    return rcpp_result_gen;
END_RCPP
}
// create_result_iterator
SEXP create_result_iterator(SEXP res_);
RcppExport SEXP _RHyper_create_result_iterator(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    rcpp_result_gen = Rcpp::wrap(create_result_iterator(res_));
    return rcpp_result_gen;
END_RCPP
}
// clear_result
void clear_result(SEXP res_);
RcppExport SEXP _RHyper_clear_result(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    clear_result(res_);
    return R_NilValue;
END_RCPP
}
// has_completed
SEXP has_completed(SEXP res_);
RcppExport SEXP _RHyper_has_completed(SEXP res_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res_(res_SEXP);
    rcpp_result_gen = Rcpp::wrap(has_completed(res_));
    return rcpp_result_gen;
END_RCPP
}
// hyper_quote_string
Rcpp::CharacterVector hyper_quote_string(SEXP x);
RcppExport SEXP _RHyper_hyper_quote_string(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hyper_quote_string(x));
    return rcpp_result_gen;
END_RCPP
}
// list_tables
Rcpp::CharacterVector list_tables(SEXP conn);
RcppExport SEXP _RHyper_list_tables(SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    rcpp_result_gen = Rcpp::wrap(list_tables(conn));
    return rcpp_result_gen;
END_RCPP
}
// is_null_pointer
SEXP is_null_pointer(SEXP conn);
RcppExport SEXP _RHyper_is_null_pointer(SEXP connSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type conn(connSEXP);
    rcpp_result_gen = Rcpp::wrap(is_null_pointer(conn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RHyper_create_hyper_process", (DL_FUNC) &_RHyper_create_hyper_process, 1},
    {"_RHyper_create_hyper_connection", (DL_FUNC) &_RHyper_create_hyper_connection, 2},
    {"_RHyper_disconnect", (DL_FUNC) &_RHyper_disconnect, 1},
    {"_RHyper_terminate", (DL_FUNC) &_RHyper_terminate, 1},
    {"_RHyper_attach_database", (DL_FUNC) &_RHyper_attach_database, 2},
    {"_RHyper_detach_database", (DL_FUNC) &_RHyper_detach_database, 2},
    {"_RHyper_query_execute", (DL_FUNC) &_RHyper_query_execute, 2},
    {"_RHyper_fetch_all", (DL_FUNC) &_RHyper_fetch_all, 1},
    {"_RHyper_fetch_n2", (DL_FUNC) &_RHyper_fetch_n2, 4},
    {"_RHyper_create_result", (DL_FUNC) &_RHyper_create_result, 2},
    {"_RHyper_create_result_iterator", (DL_FUNC) &_RHyper_create_result_iterator, 1},
    {"_RHyper_clear_result", (DL_FUNC) &_RHyper_clear_result, 1},
    {"_RHyper_has_completed", (DL_FUNC) &_RHyper_has_completed, 1},
    {"_RHyper_hyper_quote_string", (DL_FUNC) &_RHyper_hyper_quote_string, 1},
    {"_RHyper_list_tables", (DL_FUNC) &_RHyper_list_tables, 1},
    {"_RHyper_is_null_pointer", (DL_FUNC) &_RHyper_is_null_pointer, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RHyper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
